//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `Checkin`.
    static let checkin = _R.storyboard.checkin()
    /// Storyboard `Inicio`.
    static let inicio = _R.storyboard.inicio()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Checkin", bundle: ...)`
    static func checkin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.checkin)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Inicio", bundle: ...)`
    static func inicio(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.inicio)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `check-in-disabled`.
    static let checkInDisabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-in-disabled")
    /// Image `check-in`.
    static let checkIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-in")
    /// Image `distance`.
    static let distance = Rswift.ImageResource(bundle: R.hostingBundle, name: "distance")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `favorite-icon`.
    static let favoriteIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite-icon")
    /// Image `generic-food`.
    static let genericFood = Rswift.ImageResource(bundle: R.hostingBundle, name: "generic-food")
    /// Image `generic-logo`.
    static let genericLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "generic-logo")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `grubchaser`.
    static let grubchaser = Rswift.ImageResource(bundle: R.hostingBundle, name: "grubchaser")
    /// Image `hamburguer2`.
    static let hamburguer2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "hamburguer2")
    /// Image `menu-disabled`.
    static let menuDisabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-disabled")
    /// Image `menu-selected`.
    static let menuSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-selected")
    /// Image `order-bag`.
    static let orderBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "order-bag")
    /// Image `order`.
    static let order = Rswift.ImageResource(bundle: R.hostingBundle, name: "order")
    /// Image `pngwing.com`.
    static let pngwingCom = Rswift.ImageResource(bundle: R.hostingBundle, name: "pngwing.com")
    /// Image `product-image`.
    static let productImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "product-image")
    /// Image `show-list`.
    static let showList = Rswift.ImageResource(bundle: R.hostingBundle, name: "show-list")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `web-house`.
    static let webHouse = Rswift.ImageResource(bundle: R.hostingBundle, name: "web-house")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-in", bundle: ..., traitCollection: ...)`
    static func checkIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-in-disabled", bundle: ..., traitCollection: ...)`
    static func checkInDisabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkInDisabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "distance", bundle: ..., traitCollection: ...)`
    static func distance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.distance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite-icon", bundle: ..., traitCollection: ...)`
    static func favoriteIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "generic-food", bundle: ..., traitCollection: ...)`
    static func genericFood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.genericFood, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "generic-logo", bundle: ..., traitCollection: ...)`
    static func genericLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.genericLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grubchaser", bundle: ..., traitCollection: ...)`
    static func grubchaser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grubchaser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hamburguer2", bundle: ..., traitCollection: ...)`
    static func hamburguer2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hamburguer2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-disabled", bundle: ..., traitCollection: ...)`
    static func menuDisabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuDisabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-selected", bundle: ..., traitCollection: ...)`
    static func menuSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order", bundle: ..., traitCollection: ...)`
    static func order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order-bag", bundle: ..., traitCollection: ...)`
    static func orderBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pngwing.com", bundle: ..., traitCollection: ...)`
    static func pngwingCom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pngwingCom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "product-image", bundle: ..., traitCollection: ...)`
    static func productImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.productImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "show-list", bundle: ..., traitCollection: ...)`
    static func showList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showList, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "web-house", bundle: ..., traitCollection: ...)`
    static func webHouse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.webHouse, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `GrubChaserOrderTableViewCell`.
    static let grubChaserOrderTableViewCell = _R.nib._GrubChaserOrderTableViewCell()
    /// Nib `GrubChaserProductBagTableViewCell`.
    static let grubChaserProductBagTableViewCell = _R.nib._GrubChaserProductBagTableViewCell()
    /// Nib `GrubChaserProductsHeaderCollectionReusableView`.
    static let grubChaserProductsHeaderCollectionReusableView = _R.nib._GrubChaserProductsHeaderCollectionReusableView()
    /// Nib `GrubChaserProductsSelectedCollectionViewCell`.
    static let grubChaserProductsSelectedCollectionViewCell = _R.nib._GrubChaserProductsSelectedCollectionViewCell()
    /// Nib `GrubChaserProdutsCollectionViewCell`.
    static let grubChaserProdutsCollectionViewCell = _R.nib._GrubChaserProdutsCollectionViewCell()
    /// Nib `GrubChaserRestaurantCheckinCollectionViewCell`.
    static let grubChaserRestaurantCheckinCollectionViewCell = _R.nib._GrubChaserRestaurantCheckinCollectionViewCell()
    /// Nib `GrubChaserRestaurantDetailHeaderCollectionReusableView`.
    static let grubChaserRestaurantDetailHeaderCollectionReusableView = _R.nib._GrubChaserRestaurantDetailHeaderCollectionReusableView()
    /// Nib `GrubChaserRestaurantTableViewCell`.
    static let grubChaserRestaurantTableViewCell = _R.nib._GrubChaserRestaurantTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserOrderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserOrderTableViewCell) instead")
    static func grubChaserOrderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserOrderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserProductBagTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserProductBagTableViewCell) instead")
    static func grubChaserProductBagTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserProductBagTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserProductsHeaderCollectionReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserProductsHeaderCollectionReusableView) instead")
    static func grubChaserProductsHeaderCollectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserProductsHeaderCollectionReusableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserProductsSelectedCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserProductsSelectedCollectionViewCell) instead")
    static func grubChaserProductsSelectedCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserProductsSelectedCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserProdutsCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserProdutsCollectionViewCell) instead")
    static func grubChaserProdutsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserProdutsCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserRestaurantCheckinCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserRestaurantCheckinCollectionViewCell) instead")
    static func grubChaserRestaurantCheckinCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserRestaurantCheckinCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserRestaurantDetailHeaderCollectionReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserRestaurantDetailHeaderCollectionReusableView) instead")
    static func grubChaserRestaurantDetailHeaderCollectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserRestaurantDetailHeaderCollectionReusableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrubChaserRestaurantTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.grubChaserRestaurantTableViewCell) instead")
    static func grubChaserRestaurantTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.grubChaserRestaurantTableViewCell)
    }
    #endif

    static func grubChaserOrderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserOrderTableViewCell? {
      return R.nib.grubChaserOrderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserOrderTableViewCell
    }

    static func grubChaserProductBagTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProductBagTableViewCell? {
      return R.nib.grubChaserProductBagTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProductBagTableViewCell
    }

    static func grubChaserProductsHeaderCollectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProductsHeaderCollectionReusableView? {
      return R.nib.grubChaserProductsHeaderCollectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProductsHeaderCollectionReusableView
    }

    static func grubChaserProductsSelectedCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProductsSelectedCollectionViewCell? {
      return R.nib.grubChaserProductsSelectedCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProductsSelectedCollectionViewCell
    }

    static func grubChaserProdutsCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProdutsCollectionViewCell? {
      return R.nib.grubChaserProdutsCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProdutsCollectionViewCell
    }

    static func grubChaserRestaurantCheckinCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserRestaurantCheckinCollectionViewCell? {
      return R.nib.grubChaserRestaurantCheckinCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserRestaurantCheckinCollectionViewCell
    }

    static func grubChaserRestaurantDetailHeaderCollectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserRestaurantDetailHeaderCollectionReusableView? {
      return R.nib.grubChaserRestaurantDetailHeaderCollectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserRestaurantDetailHeaderCollectionReusableView
    }

    static func grubChaserRestaurantTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserRestaurantTableViewCell? {
      return R.nib.grubChaserRestaurantTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserRestaurantTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `GrubChaserProdutsCollectionViewCell`.
    static let grubChaserProdutsCollectionViewCell: Rswift.ReuseIdentifier<GrubChaserProdutsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GrubChaserProdutsCollectionViewCell")
    /// Reuse identifier `GrubChaserRestaurantTableViewCell`.
    static let grubChaserRestaurantTableViewCell: Rswift.ReuseIdentifier<GrubChaserRestaurantTableViewCell> = Rswift.ReuseIdentifier(identifier: "GrubChaserRestaurantTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _GrubChaserProductBagTableViewCell.validate()
      try _GrubChaserProductsHeaderCollectionReusableView.validate()
      try _GrubChaserProdutsCollectionViewCell.validate()
      try _GrubChaserRestaurantDetailHeaderCollectionReusableView.validate()
      try _GrubChaserRestaurantTableViewCell.validate()
    }

    struct _GrubChaserOrderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GrubChaserOrderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserOrderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserOrderTableViewCell
      }

      fileprivate init() {}
    }

    struct _GrubChaserProductBagTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GrubChaserProductBagTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProductBagTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProductBagTableViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "minus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'minus' is used in nib 'GrubChaserProductBagTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'GrubChaserProductBagTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GrubChaserProductsHeaderCollectionReusableView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GrubChaserProductsHeaderCollectionReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProductsHeaderCollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProductsHeaderCollectionReusableView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "restaurant-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'restaurant-icon' is used in nib 'GrubChaserProductsHeaderCollectionReusableView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GrubChaserProductsSelectedCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GrubChaserProductsSelectedCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProductsSelectedCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProductsSelectedCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _GrubChaserProdutsCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GrubChaserProdutsCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "GrubChaserProdutsCollectionViewCell"
      let name = "GrubChaserProdutsCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserProdutsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserProdutsCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "generic-food", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'generic-food' is used in nib 'GrubChaserProdutsCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GrubChaserRestaurantCheckinCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GrubChaserRestaurantCheckinCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserRestaurantCheckinCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserRestaurantCheckinCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _GrubChaserRestaurantDetailHeaderCollectionReusableView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GrubChaserRestaurantDetailHeaderCollectionReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserRestaurantDetailHeaderCollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserRestaurantDetailHeaderCollectionReusableView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "distance", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'distance' is used in nib 'GrubChaserRestaurantDetailHeaderCollectionReusableView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "restaurant-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'restaurant-icon' is used in nib 'GrubChaserRestaurantDetailHeaderCollectionReusableView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GrubChaserRestaurantTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GrubChaserRestaurantTableViewCell

      let bundle = R.hostingBundle
      let identifier = "GrubChaserRestaurantTableViewCell"
      let name = "GrubChaserRestaurantTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrubChaserRestaurantTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrubChaserRestaurantTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "generic-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'generic-logo' is used in nib 'GrubChaserRestaurantTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try checkin.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try inicio.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct checkin: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let checkinTabBar = StoryboardViewControllerResource<GrubChaserCheckinTabBarController>(identifier: "checkinTabBar")
      let name = "Checkin"
      let orderBagVC = StoryboardViewControllerResource<GrubChaserOrderBagViewController>(identifier: "orderBagVC")
      let ordersVC = StoryboardViewControllerResource<GrubChaserOrdersViewController>(identifier: "ordersVC")
      let productModalVC = StoryboardViewControllerResource<GrubChaserProductModalViewController>(identifier: "productModalVC")
      let restaurantOrderVC = StoryboardViewControllerResource<GrubChaserRestaurantOrderViewController>(identifier: "restaurantOrderVC")

      func checkinTabBar(_: Void = ()) -> GrubChaserCheckinTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkinTabBar)
      }

      func orderBagVC(_: Void = ()) -> GrubChaserOrderBagViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderBagVC)
      }

      func ordersVC(_: Void = ()) -> GrubChaserOrdersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ordersVC)
      }

      func productModalVC(_: Void = ()) -> GrubChaserProductModalViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productModalVC)
      }

      func restaurantOrderVC(_: Void = ()) -> GrubChaserRestaurantOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantOrderVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check-in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check-in' is used in storyboard 'Checkin', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check-in-disabled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check-in-disabled' is used in storyboard 'Checkin', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "menucard.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'menucard.fill' is used in storyboard 'Checkin', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "minus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'minus' is used in storyboard 'Checkin', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "order", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'order' is used in storyboard 'Checkin', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in storyboard 'Checkin', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.checkin().checkinTabBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkinTabBar' could not be loaded from storyboard 'Checkin' as 'GrubChaserCheckinTabBarController'.") }
        if _R.storyboard.checkin().orderBagVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderBagVC' could not be loaded from storyboard 'Checkin' as 'GrubChaserOrderBagViewController'.") }
        if _R.storyboard.checkin().ordersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ordersVC' could not be loaded from storyboard 'Checkin' as 'GrubChaserOrdersViewController'.") }
        if _R.storyboard.checkin().productModalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productModalVC' could not be loaded from storyboard 'Checkin' as 'GrubChaserProductModalViewController'.") }
        if _R.storyboard.checkin().restaurantOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantOrderVC' could not be loaded from storyboard 'Checkin' as 'GrubChaserRestaurantOrderViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct inicio: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let homeNavBar = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "homeNavBar")
      let name = "Inicio"
      let restaurantDetailsVC = StoryboardViewControllerResource<GrubChaserRestaurantDetailsViewController>(identifier: "restaurantDetailsVC")
      let restaurantsListVC = StoryboardViewControllerResource<GrubChaserRestaurantListViewController>(identifier: "restaurantsListVC")

      func homeNavBar(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavBar)
      }

      func restaurantDetailsVC(_: Void = ()) -> GrubChaserRestaurantDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantDetailsVC)
      }

      func restaurantsListVC(_: Void = ()) -> GrubChaserRestaurantListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantsListVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "show-list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'show-list' is used in storyboard 'Inicio', but couldn't be loaded.") }
        if UIKit.UIImage(named: "web-house", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'web-house' is used in storyboard 'Inicio', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.inicio().homeNavBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavBar' could not be loaded from storyboard 'Inicio' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.inicio().restaurantDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantDetailsVC' could not be loaded from storyboard 'Inicio' as 'GrubChaserRestaurantDetailsViewController'.") }
        if _R.storyboard.inicio().restaurantsListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantsListVC' could not be loaded from storyboard 'Inicio' as 'GrubChaserRestaurantListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "grubchaser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grubchaser' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginVC = StoryboardViewControllerResource<GrubChaserLoginViewController>(identifier: "loginVC")
      let name = "Login"

      func loginVC(_: Void = ()) -> GrubChaserLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.login().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Login' as 'GrubChaserLoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let mainTabBar = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "mainTabBar")
      let name = "Main"

      func mainTabBar(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBar)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check-in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check-in' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "web-house", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'web-house' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().mainTabBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBar' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
